{
  "React_Import": {
    "prefix": "rimp",
    "body": [
      "import React from 'react';"
    ],
    "description": "React import statement"
  },
  "React_Component": {
    "prefix": "rcc",
    "body": [
      "export default class ${1:className} extends React.Component {",
      "\tstate = {",
      "\t\t$2",
      "\t}",
      "",
      "\trender = () => (",
      "\t\t<div>",
      "\t\t\t $0",
      "\t\t</div>",
      "\t)",
      "}"
    ],
    "description": "React class based component"
  },
  "JS_Class_Property_Method": {
    "prefix":"jscpm",
    "body": [
      "${1:methodName} = (${2:arugments}) => {",
      "\t$0",
      "}"
    ],
    "description": "Class property method"
  },
  "React_Stateless_Functional_Component": {
    "prefix": "rfc",
    "body": [
      "const ${1:functionName} = (props) => (",
      "\t<div>",
      "\t\t$0",
      "\t</div>",
      ");",
      "export default ${1:functionName};"
    ],
    "description": "React stateless functional component"
  },
  "React_Stateless_Functional_Component_With_Return": {
    "prefix": "rfcr",
    "body": [
      "const ${1:functionName} = (props) => {",
      "\treturn (",
      "\t<div>",
      "\t\t$0",
      "\t</div>",
      "\t);",
      "}",
      "export default ${1:functionName};"
    ],
    "description": "stateless functional component(separate return)"
  },
  "React_SetState": {
    "prefix": "rcss",
    "body": [
      "this.setState(prevState => ({",
      "\t$0",
      "}));"
    ],
    "description": "creates a setState call including prevState"
  },
  "Redux_Import": {
    "prefix": "rximp",
    "body": [
      "import { createStore, combineReducers } from 'redux';"
    ],
    "description": "Import createStore and combineReducers"
  },
  "Redux_Reducer": {
    "prefix": "rxre",
    "body": [
      "const ${1:reducerName} = (state = {}, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase '${2:actionType}':",
      "\t\t\treturn ${3|{,[|}$0${4|},]|};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "}"
    ],
    "description": "A new Redux Reducer"
  },
  "Redux_Reducer_Default_State": {
    "prefix": "rxred",
    "body": [
      "const ${1:reducerName}DefaultState = ${2|{,[|} ${3} ${4|},]|};",
      "const ${1:reducerName} = (state = ${1:reducerName}DefaultState, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase '${5:actionType}':",
      "\t\t\treturn ${2}$0${4};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "}"
    ],
    "description": "Redux Reducer with Default State"
  },
  "Redux_Action": {
    "prefix": "rxact",
    "body": [
      "const ${1:actionName} = (${2:params}) => ({",
      "\ttype: '${3:actionType}',",
      "\t${2:params}",
      "});"
    ]
  }
}